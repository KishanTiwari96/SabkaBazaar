// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  mobile     String?   @unique
  name       String
  isAdmin    Boolean   @default(false)
  orders     Order[]
  cartItems  CartItem[]
  createdAt  DateTime  @default(now())

  Review Review[]
}

model Brand {
  id       String     @id @default(cuid())
  name     String     @unique
  logo     String?
  products Product[]  // relation
}

model Product {
  id          String    @id @default(cuid())
  name        String
  brand     Brand?   @relation(fields: [brandId], references: [id])
  brandId   String?
  description String
  price       Float
  stock       Int
  imageUrl    String
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
  images    Image[]
  Review Review[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model CartItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  total      Float
  status     OrderStatus @default(PENDING)
  paymentId  String? 
  refundId   String?  
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  price      Float     // Snapshot of price at time of purchase
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUND_PROCESSING
  REFUND_COMPLETED
}